#
# LICENSE UPL 1.0
#
# Copyright (c) 1982-2020 Oracle and/or its affiliates. All rights reserved.
#
# Since: January, 2020
# Author: gerald.venzl@oracle.com
# Description: Creates an Oracle Linux virtual machine.
#
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
#
# -*- mode: ruby -*-
# vi: set ft=ruby :

require 'fileutils'

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

# Box metadata location and box name
BOX_URL = "https://oracle.github.io/vagrant-projects/boxes"
BOX_NAME = "oraclelinux/8"

# INSTALL PLUGIN RELLOAD
unless Vagrant.has_plugin?("vagrant-reload")
  puts 'Installing vagrant-reload Plugin...'
  system('vagrant plugin install vagrant-reload')
end

# INSTALL PLUGIN DISKSIZE
unless Vagrant.has_plugin?("vagrant-disksize")
  puts 'Installing vagrant-disksize Plugin...'
  system('vagrant plugin install vagrant-disksize')
end

# INSTALL PLUGIN VBguest
unless Vagrant.has_plugin?("vagrant-vbguest")
  puts 'Installing vagrant-vbguest Plugin...'
  system('vagrant plugin install vagrant-vbguest')
end

#DEFINE CONFIGS FOR ADICTIONAL DISKS

# file operations needs to be relative to this file
VAGRANT_ROOT = File.dirname(File.expand_path(__FILE__))

# directory that will contain VDI files
VAGRANT_DISKS_DIRECTORY = "disks"

# controller definition
VAGRANT_CONTROLLER_NAME = "Virtual I/O Device SCSI controller"
VAGRANT_CONTROLLER_TYPE = "virtio-scsi"

# define disks
# The format is filename, size (GB), port (see controller docs)
local_disks = [
  { :filename => "disk1", :size => 2, :port => 5 },
  { :filename => "disk2", :size => 3, :port => 6 },
  { :filename => "disk3", :size => 5, :port => 25 }
]

#Define VM
Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.vm.box = BOX_NAME
  config.vm.box_url = "#{BOX_URL}/#{BOX_NAME}.json"
  config.vm.box_download_insecure=true

  #STORAGE

  disks_directory = File.join(VAGRANT_ROOT, VAGRANT_DISKS_DIRECTORY)

  # create disks before "up" action
  config.trigger.before :up do |trigger|
    trigger.name = "Create disks"
    trigger.ruby do
      unless File.directory?(disks_directory)
        FileUtils.mkdir_p(disks_directory)
      end
      local_disks.each do |local_disk|
        local_disk_filename = File.join(disks_directory, "#{local_disk[:filename]}.vdi")
        unless File.exist?(local_disk_filename)
          puts "Creating \"#{local_disk[:filename]}\" disk"
          system("vboxmanage createmedium --filename #{local_disk_filename} --size #{local_disk[:size] * 1024} --format VDI")
        end
      end
    end
  end

  # create storage controller on first run
  unless File.directory?(disks_directory)
    config.vm.provider "virtualbox" do |storage_provider|
      storage_provider.customize ["storagectl", :id, "--name", VAGRANT_CONTROLLER_NAME, "--add", VAGRANT_CONTROLLER_TYPE, '--hostiocache', 'off']
    end
  end

  # attach storage devices
  config.vm.provider "virtualbox" do |storage_provider|
    local_disks.each do |local_disk|
      local_disk_filename = File.join(disks_directory, "#{local_disk[:filename]}.vdi")
      unless File.exist?(local_disk_filename)
        storage_provider.customize ['storageattach', :id, '--storagectl', VAGRANT_CONTROLLER_NAME, '--port', local_disk[:port], '--device', 0, '--type', 'hdd', '--medium', local_disk_filename]
      end
    end
  end

  # SET SIZE OF SYSTEM DISK
  config.disksize.size = '50GB'

  # No update VBguest
  config.vbguest.auto_update = false
  config.vbguest.no_remote = true

  # VM ol8_lpic_102
  config.vm.define "ol8-lpic-201"  do |ol8_lpic_102|

    # VARIABLE HOSTNAME
   APP_NAME= "ol8-lpic-201"

    # HOSTNAME
    ol8_lpic_102.vm.hostname =APP_NAME

    # NETWORK
    ol8_lpic_102.vm.network "public_network" ,ip: "192.168.0.135",mode: "bridge" ,bridge: [
      "ens32",
      "Marvell AQtion 5Gbit Network Adapter",
    ]

    # Forward Port
    # ol8_lpic_102.vm.network "forwarded_port", guest: 8020, host: 9020, adapter: 1, guest_ip: "192.168.0.133" ,host_ip: "192.168.0.33"
    # ol8_lpic_102.vm.network "forwarded_port", guest: 2234, host: 3234, adapter: 1, guest_ip: "192.168.0.133" ,host_ip: "192.168.0.33"

    # MOUNTS
    ol8_lpic_102.vm.synced_folder ".", "/vagrant", disabled: true
    ol8_lpic_102.vm.synced_folder "./security", "/home/vagrant/security"
    ol8_lpic_102.vm.synced_folder "./configs", "/home/vagrant/configs"
    ol8_lpic_102.vm.synced_folder "../../Scripts/lpic2/", "/home/vagrant/scripts"

    # PROVIDER
    ol8_lpic_102.vm.provider "virtualbox" do |vb|
      vb.linked_clone = true
      vb.name =APP_NAME
      vb.memory = 2048
      vb.cpus = 2
    end

    # SHELL PROVISIONING
    # SSH,FIREWALLD,SELINUX, UPDATES AND PROFILE
    ol8_lpic_102.vm.provision "shell", path: "scripts/install.sh"

    # ANSIBLE PROVISIONING
    # ol8_lpic_102.vm.provision "ansible" do |ansible|
    #   ansible.limit = "all"
    #   ansible.inventory_path = "provisioning/hosts"
    #   ansible.playbook = "provisioning/app.yml"
    # end
    # cleanup after "destroy" action
    config.trigger.after :destroy do |trigger|
      trigger.name = "Cleanup operation"
      trigger.ruby do
        # the following loop is now obsolete as these files will be removed automatically as machine dependency
        local_disks.each do |local_disk|
          local_disk_filename = File.join(disks_directory, "#{local_disk[:filename]}.vdi")
          if File.exist?(local_disk_filename)
            puts "Deleting \"#{local_disk[:filename]}\" disk"
            system("vboxmanage closemedium disk #{local_disk_filename} --delete")
          end
        end
        if File.exist?(disks_directory)
          FileUtils.rmdir(disks_directory)
        end
      end
    end

  end

end