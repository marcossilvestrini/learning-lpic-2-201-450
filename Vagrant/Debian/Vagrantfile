require 'fileutils'

#DEFINE VARIABLES FOR ADICTIONAL DISKS

# file operations needs to be relative to this file
VAGRANT_ROOT = File.dirname(File.expand_path(__FILE__))

# directory that will contain VDI files
VAGRANT_DISKS_DIRECTORY = "disks"

# controller definition
VAGRANT_CONTROLLER_NAME = "Virtual I/O Device SCSI controller"
VAGRANT_CONTROLLER_TYPE = "virtio-scsi"

# define disks
# The format is filename, size (GB), port (see controller docs)
local_disks = [
  { :filename => "disk1", :size => 1, :port => 5 },
  { :filename => "disk2", :size => 2, :port => 6 },
  { :filename => "disk3", :size => 1, :port => 25 }
]

# INSTALL PLUGIN RELLOAD
unless Vagrant.has_plugin?("vagrant-reload")
  puts 'Installing vagrant-reload Plugin...'
  system('vagrant plugin install vagrant-reload')
end

# INSTALL PLUGIN DISKSIZE
unless Vagrant.has_plugin?("vagrant-disksize")
  puts 'Installing vagrant-disksize Plugin...'
  system('vagrant plugin install vagrant-disksize')
end

Vagrant.configure("2") do |config|
  config.vm.box = "debian/bullseye64"
  #config.vm.box = "generic/debian10"
  config.vm.box_download_insecure=true
  config.vbguest.auto_update = false

  #STORAGE

  # SET SIZE OF SYSTEM DISK
  config.disksize.size = '50GB'

  disks_directory = File.join(VAGRANT_ROOT, VAGRANT_DISKS_DIRECTORY)

  # create disks before "up" action
  config.trigger.before :up do |trigger|
    trigger.name = "Create disks"
    trigger.ruby do
      unless File.directory?(disks_directory)
        FileUtils.mkdir_p(disks_directory)
      end
      local_disks.each do |local_disk|
        local_disk_filename = File.join(disks_directory, "#{local_disk[:filename]}.vdi")
        unless File.exist?(local_disk_filename)
          puts "Creating \"#{local_disk[:filename]}\" disk"
          system("vboxmanage createmedium --filename #{local_disk_filename} --size #{local_disk[:size] * 1024} --format VDI")
        end
      end
    end
  end

  # create storage controller on first run
  unless File.directory?(disks_directory)
    config.vm.provider "virtualbox" do |storage_provider|
      storage_provider.customize ["storagectl", :id, "--name", VAGRANT_CONTROLLER_NAME, "--add", VAGRANT_CONTROLLER_TYPE, '--hostiocache', 'off']
    end
  end

  # attach storage devices
  config.vm.provider "virtualbox" do |storage_provider|
    local_disks.each do |local_disk|
      local_disk_filename = File.join(disks_directory, "#{local_disk[:filename]}.vdi")
      unless File.exist?(local_disk_filename)
        storage_provider.customize ['storageattach', :id, '--storagectl', VAGRANT_CONTROLLER_NAME, '--port', local_disk[:port], '--device', 0, '--type', 'hdd', '--medium', local_disk_filename]
      end
    end
  end

  # VM Debian Server
  config.vm.define "debian_lpic_201"  do |debian_lpic_201|

    # VARIABLE HOSTNAME
    APP_NAME= "debian-lpic-201"

    # HOSTNAME
    debian_lpic_201.vm.hostname = APP_NAME

    # NETWORK
    debian_lpic_201.vm.network "public_network" ,ip: "192.168.0.134",mode: "bridge",bridge: [
      "ens32",
      "Marvell AQtion 5Gbit Network Adapter"
    ]

    # MOUNTS
    debian_lpic_201.vm.synced_folder ".", "/vagrant", disabled: true
    debian_lpic_201.vm.synced_folder "./security", "/home/vagrant/security"
    debian_lpic_201.vm.synced_folder "./configs", "/home/vagrant/configs"
    debian_lpic_201.vm.synced_folder "../../Scripts/lpic2/", "/home/vagrant/scripts"

    # PROVIDER CUSTOMIZATIONS
    debian_lpic_201.vm.provider "virtualbox" do |vb|
      vb.linked_clone = true
      vb.name = APP_NAME
      vb.memory = 4096
      vb.cpus = 3

      #USB
      vb.customize ["modifyvm", :id, "--usb", "on"]
      vb.customize ["modifyvm", :id, "--usbehci", "on"]
      vb.customize ["modifyvm", :id, "--usbxhci", "on"]
      vb.customize [
        "usbfilter", "add", "0",
        "--active","yes",
        "--remote","no",
        "--target", :id,
	      "--vendorid","0x0781",
	      "--productid","0x5567",
        "--serialnumber","4C530201201202122120",
        "--manufacturer","SanDisk",
        "--name", "Pen Driver",
        "--product", "Cruzer Blade"
    ]
    end

    # PROVISION
    debian_lpic_201.vm.provision "shell", path: "scripts/setup.sh"
    debian_lpic_201.vm.provision "shell", path: "scripts/mounts.sh"

  end

  # config.trigger.after [:provision] do |trigger|
  #   trigger.name = "Reboot after provisioning"
  #   trigger.run = { :inline => "vagrant reload" }
  # end

  # cleanup after "destroy" action
  config.trigger.after :destroy do |trigger|
    trigger.name = "Cleanup operation"
    trigger.ruby do
      # the following loop is now obsolete as these files will be removed automatically as machine dependency
      local_disks.each do |local_disk|
        local_disk_filename = File.join(disks_directory, "#{local_disk[:filename]}.vdi")
        if File.exist?(local_disk_filename)
          puts "Deleting \"#{local_disk[:filename]}\" disk"
          system("vboxmanage closemedium disk #{local_disk_filename} --delete")
        end
      end
      if File.exist?(disks_directory)
        FileUtils.rmdir(disks_directory)
      end
    end
  end
end